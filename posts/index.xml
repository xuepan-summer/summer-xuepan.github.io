<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Summer&#39;s Blog</title>
    <link>http://xuepan.xyz/posts/</link>
    <description>Recent content in Posts on Summer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 29 Jul 2020 14:45:08 +0800</lastBuildDate>
    
	<atom:link href="http://xuepan.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多线程</title>
      <link>http://xuepan.xyz/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 29 Jul 2020 14:45:08 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>为什么需要多线程？    硬件需要：
CPU与其他设备的速度不同步，CPU很快，等执行完之后就进行等待，而且现在CPU大多是多核的，速度更快了。希望可以让CPU使用更加充分。
  程序需要：
java的执行模型是同步/阻塞的：默认是单线程，在执行的过程中，执行完第一行再执行第二行，一步一步来。假如第一行是执行一个很慢的方法，那么就会等这个方法执行结束再继续，这样就需要等待很久。
    多线程的过程
默认执行main线程，假如新开了线程a并start，那么就增加了一个执行流，main线程和线程a都有其私有的方法栈。
  start &amp;amp; run 的区别
  start相当于main线程（老板）给新线程（工人）分配完了之后就让工人自己去干活了，自己继续去做自己的事情。
  run相当于main线程（老板）给新线程（工人）分配了活并进行监工，等工人干完活之后再去做自己的事情。
如果让新线程执行run方法的话，和没有分多线程是一样的效果！！！只有start才可以并发执行！
    多线程会产生什么问题？
同一份代码，不同人乱序运行，如果不是原子操作（某一时刻只能被一个线程操作），那么就会时好时坏，有时就会出错
例子：i 初始值为0，线程a和线程b都执行同一方法中的i++操作
理想正确场景：线程a执行时 i 加1，变成1；线程b执行时 i 再加1，变成2（即使顺序调换，先线程b再线程a，结果也还是2）
实际报错场景：i++分为三步：
(1) 取出 i 的值
(2) i 的值加 1
(3) 将叠加之后的值给 i
假设线程a先占用了CPU，取出 i 的初始值0，然后 i 加1变成了1。但是！此时线程a占用CPU的时间到了，所以轮到了线程b，由于线程a还没将数据赋值给 i ，所以 i 的值还是0，线程2成功在其基础上加1并赋值给 i ，那么 i 就变成了1。接下来又轮到了线程a，线程a直接将刚刚叠加之后的结果1赋值给 i 。最终结果就变成了 1 而不是2。 如下图所示。</description>
    </item>
    
    <item>
      <title>深拷贝与浅拷贝</title>
      <link>http://xuepan.xyz/posts/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Thu, 23 Jul 2020 14:47:32 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>Home里定义了Cat
public class Home { public Cat cat; public Home(Cat cat) { this.cat = cat; } } Cat有其名字
public class Cat { public String name; public Cat(String name) { this.name = name; } } 在Main方法中定义一个Home类型的对象，对其进行拷贝
Home home = new Home(new Cat(&amp;#34;Tom&amp;#34;)); 相当于将名为Tom的猫放在Home里
在这个具体的例子中，
浅拷贝：将这只名为Tom的猫也放到新房子里
深拷贝：重新定义一只名为Tom的猫，将其放到新房子里
public static Home shallowCopy(Home home) { Home newHome = new Home(home.cat); return newHome; //此处只为方便理解，建议直接return new Home(home.cat); } home.cat就是刚开始home对象里的猫，然后通过构造器将其直接放到新建的newHome里面。
public static Home deepCopy(Home home) { Cat newCat = new Cat(home.</description>
    </item>
    
    <item>
      <title>Collection体系的常用类及其背后的数据结构</title>
      <link>http://xuepan.xyz/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 28 Jun 2020 16:20:17 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>集合有两个基本接口：Collection和Map
List是一个有序集合，Set里不包含重复元素，Queue是队列，遵循FIFO原则（First In First Out）
List
常用方法：
add()：增加元素
retainAll()：保留参数里的所有元素
containsAll()：是否包含参数这个集合里的所有元素
toArray()：转换成数组
1.ArrayList
2.LinkedList
3.Vector&amp;amp;Stack
现已不使用
ArrayList &amp;amp; LinkedList：1.实现方式：ArrayList 基于数组来实现，LinkedList基于双向链表来实现
2.内存占用：LinkedList比ArrayList 更占内存，因为还需要存储两个引用（指向前面的元素和后面的元素）
3.随机访问速度：ArrayList 更快
Set
1.EnumSet
该Set里的元素必须都是指定枚举类型的枚举值
2.HashSet
3.TreeSet
HashSet &amp;amp; TreeSetHashSet是二叉树实现的，加入的元素不一定和加入的顺序保持一致，这一点就和ArrayList不一样
TreeSet是SortedSet接口的唯一实现，元素是有序的，可以采用默认的排序方法，也可以自定义排序方法
Queue
1.Deque
双端队列，两端均可增加可减少元素
2.PriorityQueue
有优先级的队列，按关键字进行排序，插入元素的时候会自动找到合适位置插入
Map
1.HashMap
HashMap的实现没有被同步，所以它是线程不安全的，ConcurrentHashMap是线程安全的
HashMap在resize扩容的时候会造成死循环
2.TreeMap
TreeMap是基于红黑树实现的</description>
    </item>
    
    <item>
      <title>Java的包管理与Maven</title>
      <link>http://xuepan.xyz/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</link>
      <pubDate>Fri, 26 Jun 2020 17:52:27 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</guid>
      <description>1.JVM（java虚拟机）的作用：
只执行class文件，也就是字节码文件，如果遇到了新类就会去相应类路径classPath里找。各个类的字节码文件一般都打包在jar包里。
2.传递性依赖：类依赖其他类
maven的包管理解决了传递性依赖和包冲突：
1）传递性依赖的解决：
maven会告诉jvm到底去哪找，根据groupId/artifactId/version去中央仓库可以找到自己想要的jar包，对应的jar包还有其pom文件，文件里会说明它又依赖了什么jar包，所以整棵依赖树都会被下载下来
2）包冲突的解决：
【1】包冲突是什么？版本号不同的包名同时出现在classPath里，则jvm不知道到底采用哪个包
【2】包冲突的表现：
AbstractMethodError
NoClassDefFoundError
ClassNotFoundException
LinkageError
NoSuchMethodError
【3】看包依赖的方法
法1：看右侧maven的dependencies
法2：命令行里执行mvn dependency:tree 看到的是maven解决冲突之后的结构
【4】 解决冲突的原则：
选择距离项目最近的jar包
当距离项目一样近时，选前者
【5】实例：
因为此时既依赖了0.1版本的C包，又依赖了0.2版本的C包，所以产生了包冲突
所以maven在解决包冲突的时候，选择了较近的0.1版本的C包，而舍弃了高版本
当高版本的jar包里有我们需要的方法时，此时就会报错，要想采用高版本的jar包，有以下几种方式：
① 直接依赖0.2版本的C包，修改pom.xml文件的dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.hcsp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-library-a&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.4&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; ② 排除掉0.1版本的C包
&amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;com.github.hcsp&amp;lt;groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-library-c&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; ③ 采用IDEA的Maven Helper插件
打开pom，命令行上方有dependency Analyzer 点Reimport按钮，则显示了maven冲突的地方，选中要排除的那个,然后右键exclude</description>
    </item>
    
    <item>
      <title>类的访问控制符public、protected、default、private</title>
      <link>http://xuepan.xyz/posts/%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AC%A6publicprotecteddefaultprivate/</link>
      <pubDate>Mon, 08 Jun 2020 09:31:16 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AC%A6publicprotecteddefaultprivate/</guid>
      <description>private仅本类可用 package private包级私有（默认不写修饰符）仅本包及本类可用 protected 本类、本包、其子类均可用 public没有限制  具体如下图所示：</description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客</title>
      <link>http://xuepan.xyz/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 07 Jun 2020 14:39:18 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>1.安装hugo
Windows:
 下载windows相应版本的压缩包（对应32位/64位）并解压 将hugo.exe放到D:\softwares\hugo\hugo.exe 将D:\softwares\hugo加到PATH中 重启终端，运行hugo version查看版本验证安装成功  Mac:
  brew install hugo
  hugo version 验证安装成功
执行这两行代码即可
  2.参照文档搭建博客
  进入hugo官网 https://gohugo.io/ ，点击 Quick Start，则有搭建的全部步骤
在搭建之前，先打开一个目录，例如进入到D盘，然后cmder(即：在此处打开命令窗口)
  直接从官网步骤的第二步开始抄代码，一直到第七步
【2】create new site
hugo new site xxx.github.io-generator
xxx要小写，是自己的github用户名，则会在当前目录创建这个网站
  code xxx.github.io-generator/
则会在VSCode里打开该目录
  【3】add a theme 打开终端，继续照抄代码
  【4】add some content 创建文章，自己命名即可
  可以找到该md文件，直接写博客了，修改draft:true为draft:false
  【5】Start the Hugo server 可以看到网站地址了，ctrl+鼠标左键点进去就可以看到自己写的博客</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>http://xuepan.xyz/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 07 Jun 2020 11:56:45 +0800</pubDate>
      
      <guid>http://xuepan.xyz/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description># 大家好
这是我的第一篇博客，希望可以将工作和学习中的内容多多总结，记录下来，也需要对别人有所帮助。</description>
    </item>
    
  </channel>
</rss>